<?xml version="1.0"?>
<!-- ##################################### -->
<!-- DESCRIPTION OF THE FOUR WHEELED ROBOT -->
<!-- Made by Alexsandar Haber - October 23 -->
<!-- ##################################### -->

<robot name="differential_drive_robot" xmlns:xacro="http://www.ros.org/wiki/xacro">
    <!-- Body Dimensions -->
    <xacro:property name="body_link_x_dim" value="1"/>
    <xacro:property name="body_link_y_dim" value="0.6"/>
    <xacro:property name="body_link_z_dim" value="0.3"/>
    
    <!-- Wheel Dimensions -->
    <xacro:property name="wheel_link_radius" value="0.15"/>
    <xacro:property name="wheel_link_length" value="0.1"/>
    <xacro:property name="wheel_link_z_location" value="-0.1"/>

    <!-- Material Density -->
    <xacro:property name="body_density" value="2710.0"/>
    <xacro:property name="wheel_density" value="2710.0"/>

    <!-- Pi constant -->
    <xacro:property name="pi_const" value="3.14159265"/>
    
    <!-- Robot body and wheel mass -->
    <xacro:property name="body_mass" value="${body_density*body_link_x_dim*body_link_y_dim*body_link_z_dim}"/>
    <xacro:property name="wheel_mass" value="${wheel_density*pi_const*wheel_link_radius*wheel_link_radius*wheel_link_length}"/>
    
    <!-- Moments of inertia of the wheel -->
    <xacro:property name="Iz_wheel" value="${0.5*wheel_mass*wheel_link_radius*wheel_link_radius}"/>
    <xacro:property name="I_wheel" value="${(1.0/12.0)*wheel_mass*(3.0*wheel_link_radius/wheel_link_radius+wheel_link_length*wheel_link_length)}"/>
    
    <!-- This macro defiens the complete inertial seciton of the wheel -->
    <!-- It is used later in cod -->
    <xacro:macro name="inertia_wheel">
        <inertial>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <mass value="${wheel_mass}"/>
            <inertia ixx="${I_wheel}" ixy="0.0" ixz="0.0" iyy="${I_wheel}" iyz="0.0" izz="${Iz_wheel}"/>
        </inertial>
    </xacro:macro>

    <!-- Over here we include the file that dfefines extra Gazebo options and motion control driver -->
    <xacro:include filename="$(find robot_model_pkg)/urdf/robot.gazebo"/>
    
    <!-- ############################## -->
    <!-- Now we define Links and Joints -->
    <!-- ############################## -->

    <!-- In ROS, created objects calls by links. For example wheel1 and body. They are two different 3D shapes but we call them as links. So in this case, joints are coming meaning that connecitons between two different shapes. We won't call these conencitons as links -->

    <!-- We need to have this link, otherwise Gazebo will complain -->
    <link name="dummy"></link>
    <joint name="dummy_joint" type="fixed">
        <parent link="dummy"/>
        <child link="body_link"/>
    </joint>

    <!-- ######################################## -->
    <!-- We will start from the body of our robot -->
    <!-- ######################################## -->
    <link name="body_link">
        <visual>
            <geometry>
                <box size="${body_link_x_dim} ${body_link_y_dim} ${body_link_z_dim}"/>
            </geometry>
        </visual>

        <collision>
            <geometry>
                <box size="${body_link_x_dim} ${body_link_y_dim} ${body_link_z_dim}"/>
            </geometry>
            <origin xyz="0 0 0" rpy="0 0 0"/>
        </collision>

        <inertial>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <mass value="${body_mass}"/>

            <inertia ixx="${(1/12)*body_mass*(body_link_y_dim*body_link_y_dim+body_link_z_dim*body_link_z_dim)}" ixy="0" ixz="0" iyy="${(1/12)*body_mass*(body_link_x_dim*body_link_x_dim+body_link_z_dim*body_link_z_dim)}" iyz="0" izz="${(1/12)*body_mass*(body_link_y_dim*body_link_y_dim+body_link_x_dim*body_link_x_dim)}"/>
        </inertial>
    </link>

    <!-- ########################################################### -->
    <!-- Now we start to back right wheel of the robot and the joint -->
    <!-- ########################################################### -->
    <joint name="wheel1_joint" type="continuous">
        <parent link="body_link"/>
        <child link="wheel1_link"/>
        <origin xyz="${-body_link_x_dim/2+1.2*wheel_link_radius} ${-body_link_y_dim/2-wheel_link_length/2} ${wheel_link_z_location}" rpy="0 0 0"/>
        <axis xyz="0 1 0"/>
        <limit effort="1000" velocity="1000"/>
        <dynamics damping="1.0" friction="1.0"/>
    </joint>

    <link name="wheel1_link">
        <visual>
            <origin xyz="0 0 0" rpy="1.570795 0 0"/>
            <geometry>
                <cylinder radius="${wheel_link_radius}" length="${wheel_link_length}"/>
            </geometry>
        </visual>

        <collision>
            <origin xyz="0 0 0" rpy="1.570795 0 0"/>
            <geometry>
                <cylinder radius="${wheel_link_radius}" length="${wheel_link_length}"/>
            </geometry>
        </collision>

        <!-- We defined this macro above and we will call it in each wheel link -->
        <xacro:inertia_wheel/>
    </link>

    <!-- ########################################################## -->
    <!-- Now we start to back left wheel of the robot and the joint -->
    <!-- ########################################################## -->
    <joint name="wheel2_joint" type="continuous">
        <parent link="body_link"/>
        <child link="wheel2_link"/>
        <origin xyz="${-body_link_x_dim/2+1.2*wheel_link_radius} ${body_link_y_dim/2+wheel_link_length/2} ${wheel_link_z_location}" rpy="0 0 0"/>
        <axis xyz="0 1 0"/>
        <limit effort="1000" velocity="1000"/>
        <dynamics damping="1.0" friction="1.0"/>
    </joint>

    <link name="wheel2_link">
        <visual>
            <origin xyz="0 0 0" rpy="1.570795 0 0"/>
            <geometry>
                <cylinder radius="${wheel_link_radius}" length="${wheel_link_length}"/>
            </geometry>
        </visual>

        <collision>
            <origin xyz="0 0 0" rpy="1.570795 0 0"/>
            <geometry>
                <cylinder radius="${wheel_link_radius}" length="${wheel_link_length}"/>
            </geometry>
        </collision>

        <!-- We defined this macro above and we will call it in each wheel link -->
        <xacro:inertia_wheel/>
    </link>
    
    <!-- ############################################################ -->
    <!-- Now we start to front right wheel of the robot and the joint -->
    <!-- ############################################################ -->
    <joint name="wheel3_joint" type="continuous">
        <parent link="body_link"/>
        <child link="wheel3_link"/>
        <origin xyz="${body_link_x_dim/2-1.2*wheel_link_radius} ${-body_link_y_dim/2-wheel_link_length/2} ${wheel_link_z_location}" rpy="0 0 0"/>
        <axis xyz="0 1 0"/>
        <limit effort="1000" velocity="1000"/>
        <dynamics damping="1.0" friction="1.0"/>
    </joint>

    <link name="wheel3_link">
        <visual>
            <origin xyz="0 0 0" rpy="1.570795 0 0"/>
            <geometry>
                <cylinder radius="${wheel_link_radius}" length="${wheel_link_length}"/>
            </geometry>
        </visual>

        <collision>
            <origin xyz="0 0 0" rpy="1.570795 0 0"/>
            <geometry>
                <cylinder radius="${wheel_link_radius}" length="${wheel_link_length}"/>
            </geometry>
        </collision>

        <!-- We defined this macro above and we will call it in each wheel link -->
        <xacro:inertia_wheel/>
    </link>

    <!-- ########################################################### -->
    <!-- Now we start to front left wheel of the robot and the joint -->
    <!-- ########################################################### -->
    <joint name="wheel4_joint" type="continuous">
        <parent link="body_link"/>
        <child link="wheel4_link"/>
        <origin xyz="${body_link_x_dim/2-1.2*wheel_link_radius} ${body_link_y_dim/2+wheel_link_length/2} ${wheel_link_z_location}" rpy="0 0 0"/>
        <axis xyz="0 1 0"/>
        <limit effort="1000" velocity="1000"/>
        <dynamics damping="1.0" friction="1.0"/>
    </joint>

    <link name="wheel4_link">
        <visual>
            <origin xyz="0 0 0" rpy="1.570795 0 0"/>
            <geometry>
                <cylinder radius="${wheel_link_radius}" length="${wheel_link_length}"/>
            </geometry>
        </visual>

        <collision>
            <origin xyz="0 0 0" rpy="1.570795 0 0"/>
            <geometry>
                <cylinder radius="${wheel_link_radius}" length="${wheel_link_length}"/>
            </geometry>
        </collision>

        <!-- We defined this macro above and we will call it in each wheel link -->
        <xacro:inertia_wheel/>
    </link>
</robot>